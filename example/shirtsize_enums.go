// generated by goplater -type=ShirtSize; DO NOT EDIT
package main

import (
	"database/sql/driver"
	"encoding/json"
	"errors"
	"fmt"
)

func init() {
	// stub usage of json for situation when
	// (Un)MarshalJSON methods will be omitted
	_ = json.Delim('s')

	// stub usage of sql/driver for situation when
	// Scan/Value methods will be omitted
	_ = driver.Bool
}

var ErrShirtSizeInvalid = errors.New("ShirtSize is invalid")

func init() {
	var v ShirtSize
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		defShirtSizeNameToValue = map[string]ShirtSize{
			interface{}(NA).(fmt.Stringer).String(): NA,
			interface{}(XS).(fmt.Stringer).String(): XS,
			interface{}(S).(fmt.Stringer).String():  S,
			interface{}(M).(fmt.Stringer).String():  M,
			interface{}(L).(fmt.Stringer).String():  L,
			interface{}(XL).(fmt.Stringer).String(): XL,
		}
	}
}

var defShirtSizeNameToValue = map[string]ShirtSize{
	"NA": NA,
	"XS": XS,
	"S":  S,
	"M":  M,
	"L":  L,
	"XL": XL,
}

var defShirtSizeValueToName = map[ShirtSize]string{
	NA: "NA",
	XS: "XS",
	S:  "S",
	M:  "M",
	L:  "L",
	XL: "XL",
}

// String is generated so ShirtSize satisfies fmt.Stringer.
func (r ShirtSize) String() string {
	s, ok := defShirtSizeValueToName[r]
	if !ok {
		return fmt.Sprintf("ShirtSize(%d)", r)
	}
	return s
}

// Validate verifies that value is predefined for ShirtSize.
func (r ShirtSize) Validate() error {
	_, ok := defShirtSizeValueToName[r]
	if !ok {
		return ErrShirtSizeInvalid
	}
	return nil
}

// MarshalJSON is generated so ShirtSize satisfies json.Marshaler.
func (r ShirtSize) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := defShirtSizeValueToName[r]
	if !ok {
		return nil, fmt.Errorf("ShirtSize(%d) is invalid value", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so ShirtSize satisfies json.Unmarshaler.
func (r *ShirtSize) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ShirtSize: should be a string, got %s", string(data))
	}
	v, ok := defShirtSizeNameToValue[s]
	if !ok {
		return fmt.Errorf("ShirtSize(%q) is invalid value", s)
	}
	*r = v
	return nil
}

// Value is generated so ShirtSize satisfies db row driver.Valuer.
func (r ShirtSize) Value() (driver.Value, error) {
	j, err := json.Marshal(r)
	return j, err
}

// Value is generated so ShirtSize satisfies db row driver.Scanner.
func (r *ShirtSize) Scan(src interface{}) error {
	source, ok := src.([]byte)
	if !ok {
		return errors.New("ShirtSize: typecast to []byte failed.")
	}

	var i ShirtSize
	err := json.Unmarshal(source, &i)
	if err != nil {
		return errors.New("ShirtSize: can't unmarshal column data")
	}

	*r = i
	return nil
}
